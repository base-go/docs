<%
if (s.forceSsl) {
%>
    server {
        listen       80;
        server_name  <%-s.publicDomain%>;

        # Used by Lets Encrypt
        location /.well-known/acme-challenge/ {
            root <%-s.staticWebRoot%>;
        }

        # Used by CapRover for health check
        location /.well-known/captain-identifier {
            root <%-s.staticWebRoot%>;
        }
        
        location / {
            return 302 https://$http_host$request_uri;
        }
    }
<%
}
%>

server {
    <%
    if (!s.forceSsl) {
    %>
        listen       80;
    <%
    }
    if (s.hasSsl) {
    %>
        listen              443 ssl;
        http2               on;
        ssl_certificate     <%-s.crtPath%>;
        ssl_certificate_key <%-s.keyPath%>;
    <%
    }
    if (s.logAccessPath) {
    %>
        access_log <%-s.logAccessPath%>;
    <%
    }
    %>

    client_max_body_size 500m;
    server_name  <%-s.publicDomain%>;
    root <%-s.staticWebRoot%>;
    index index.html;

    # Include MIME types
    include /etc/nginx/mime.types;
    
    # Enable gzip compression for better performance
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_proxied any;
    gzip_types 
        text/plain 
        text/css 
        text/xml 
        text/javascript 
        application/javascript 
        application/json 
        application/xml+rss 
        application/atom+xml
        application/rss+xml
        application/xhtml+xml
        font/truetype
        font/opentype
        application/vnd.ms-fontobject
        image/svg+xml;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # JavaScript modules with proper MIME type
    location ~* \.m?js$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Content-Type "text/javascript";
        access_log off;
    }

    # CSS files
    location ~* \.css$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Content-Type "text/css";
        access_log off;
    }

    # Static assets
    location ~* \.(png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|webp)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
    }

    # Serve .md files directly for AI context
    location ~ \.md$ {
        expires 1h;
        add_header Cache-Control "public, must-revalidate";
        add_header Content-Type "text/markdown";
        try_files $uri =404;
    }

    # Handle /docs/ specifically - VitePress clean URLs
    location = /docs/ {
        try_files /docs/index /docs/index.html =404;
        add_header Content-Type "text/html";
    }
    
    # Handle all clean URLs generated by VitePress
    location ~* ^/docs/[^.]+$ {
        add_header Content-Type "text/html";
        expires 1h;
        add_header Cache-Control "public, must-revalidate";
        try_files $uri $uri.html =404;
    }

    # Sitemap and robots
    location = /sitemap.xml {
        expires 1d;
        add_header Cache-Control "public, must-revalidate";
        add_header Content-Type "application/xml";
    }

    location = /robots.txt {
        expires 1d;
        add_header Cache-Control "public, must-revalidate";
        add_header Content-Type "text/plain";
        access_log off;
    }

    # VitePress clean URLs fallback
    location / {
        try_files $uri $uri.html $uri/index.html $uri/ =404;
        
        location ~* \.html$ {
            expires 1h;
            add_header Cache-Control "public, must-revalidate";
        }
    }

    # Used by Lets Encrypt
    location /.well-known/acme-challenge/ {
        root <%-s.staticWebRoot%>;
    }
    
    # Used by CapRover for health check
    location /.well-known/captain-identifier {
        root <%-s.staticWebRoot%>;
    }

    # Deny access to sensitive files
    location ~ /\.(git|env|DS_Store) {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Custom error pages
    error_page 404 /404.html;
    error_page 502 /captain_502_custom_error_page.html;
    location = /captain_502_custom_error_page.html {
        root <%-s.customErrorPagesDirectory%>;
        internal;
    }
}